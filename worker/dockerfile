# Use Python slim image for smaller size
FROM python:3.11-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Create non-root user for security and add to docker group
RUN groupadd -r appuser && useradd -r -g appuser appuser \
    && groupadd -f docker \
    && usermod -aG docker appuser

# Set work directory
WORKDIR /app

# Install system dependencies including Docker CLI
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        gcc \
        libc6-dev \
        curl \
        ca-certificates \
        gnupg \
        lsb-release \
    && mkdir -p /etc/apt/keyrings \
    && curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null \
    && apt-get update \
    && apt-get install -y --no-install-recommends docker-ce-cli \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Change ownership to non-root user
RUN chown -R appuser:appuser /app

# Add an entrypoint script to handle docker group permissions
RUN echo '#!/bin/bash\n\
# Get the docker socket group ID from the host\n\
DOCKER_SOCK_GID=$(stat -c "%g" /var/run/docker.sock 2>/dev/null || echo "999")\n\
\n\
# Update the docker group GID to match the host\n\
groupmod -g $DOCKER_SOCK_GID docker 2>/dev/null || true\n\
\n\
# Add appuser to docker group with the correct GID\n\
usermod -aG $DOCKER_SOCK_GID appuser 2>/dev/null || true\n\
\n\
# Execute the original command as appuser\n\
exec gosu appuser "$@"\n' > /entrypoint.sh \
    && chmod +x /entrypoint.sh

# Install gosu for better user switching
RUN apt-get update && apt-get install -y gosu && rm -rf /var/lib/apt/lists/*

ENTRYPOINT ["/entrypoint.sh"]

# Run celery worker
CMD ["celery", "-A", "celery_app", "worker", "--loglevel=info", "--concurrency=2"]